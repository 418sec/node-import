{"name":"Node-import","tagline":"Imports dependencies and run it directly or concatenate them and exports to file.","body":"NodeJS Import\r\n===========\r\nImports dependencies and run it directly (sync/async) or concatenate them and exports to file.\r\n\r\n### **Why?**\r\n***\r\n\r\nBefore I write this, I just think if I can concatenate my scripts with direct import in each file.\r\nBut when I thinking how to do that, I think I need to create script that can concatenate and run it,\r\nas well supporting synchronus mode without headache.\r\n\r\nBy default, imported scripts executed in synchronus mode, since for async purpose nodejs already have it,\r\neven we have `async` module.\r\n\r\nWe know that asynchronus evented I/O model is the benefits of nodejs. But sometimes, probably we need to runs\r\nsynchronus scripts, especially when we create some modules and we need to separate the files but we need\r\nto ensure each files can communicate with each others, including the global variables in each files.\r\n\r\n### **Installation**\r\n***\r\n\r\n```\r\nnpm install --save node-import\r\n```\r\n\r\nTo use the CLI support, install it globally.\r\n```\r\nnpm install -g node-import\r\n```\r\n\r\n### **Import/Export**\r\nImport another scripts and run/export to file.\r\n\r\n#### **Syntax**\r\n***\r\n\r\nUse the `'@import [file ..]';` to import the dependencies. It's should be string, like when you use `use strict`.\r\n\r\n#### **Example**\r\n***\r\n\r\n##### `test.js`\r\n```js\r\n// Importing dependencies at begining.\r\n'@import libs/lib-a.js';\r\n'@import libs/lib-b.js';\r\n\r\nvar a = 'Test..';\r\n\r\n// Create variable from file lib-a.js.\r\nvar b = libaA;\r\n\r\nconsole.log(a, b);\r\n```\r\n\r\n##### `libs/lib-a.js`;\r\n```js\r\n// Create library to be used by test.js\r\nvar libA = 'Foo is bar foobar';\r\n\r\n// Import is not always in begining, and relative to cwd of lib-a.js.\r\n'@import lib-c.js';\r\n\r\n// Imports multiple files.\r\n'@import libs/lib-a.js, libs/lib-c.js';\r\n'@import libs/*.js';\r\n```\r\n\r\n### **Namespace**\r\nNamespace provide ability to keep the global variables of file is not overwritten by other references.\r\n\r\n#### **Syntax**\r\n***\r\n\r\nYou can define namespace by using `'@namespace $NAME$`;`. Like import, it's should be string as well.\r\n\r\n#### **Example**\r\n***\r\n\r\n##### `foo.js`\r\n```js\r\n// Importing libs.\r\n'@import bar.js';\r\n\r\n// Private vars.\r\nvar myfoo = 'Foo of foo.js';\r\nvar exfoo = bar.foo + myfoo;\r\n\r\n// Global vars.\r\nvar spfoo = foobar + ' is global';\r\n```\r\n\r\n##### `bar.js`\r\n```js\r\n// Create namespace\r\n'@namespace bar';\r\n\r\nvar foo = 'Foo of Bar';\r\nvar foobar = 'Global foobar';\r\n```\r\n\r\n\r\n### **Usage**\r\n#### `NodeJS`\r\n***\r\n\r\n`imports(files, [options (object)]);`\r\n\r\n##### `options`\r\n- `exec` Execute the imported scripts. Default `true`\r\n- `async` Execute the imported scripts in async mode. Default `false`\r\n- `export` Export imported scripts to file. Default `false`\r\n- `exportDir` Export location.\r\n- `exportMin` Include minified version when exporting. Default `true`\r\n- `exportMap` Include sourcemap when uglifying. Default `true` *(not yet tested)*\r\n\r\n```js\r\nvar imports = require('node-import');\r\n\r\n// Just execute.\r\nimports('./test.js');\r\n\r\n// Execute and get the scripts.\r\nvar result = imports('./test.js');\r\n\r\n// Only export the scripts.\r\nimports('./test.js', { exec: false, export: true, exportDir: './test/out' });\r\n```\r\n\r\n#### `CLI`\r\n***\r\n\r\n`node-import [options] [file ..]`\r\n\r\n##### `options`\r\n- `-r` Run imported scripts. Default `true`\r\n- `-a` Run in async mode. Default `false`\r\n- `-e` Export imported scripts. Default `false`\r\n- `-u` Include uglify when exporting scripts. Default `true`\r\n- `-s` Include sourcemap when uglifying. Default `true`\r\n- `-o` Output directory to export.\r\n- `-v` Logs all processes.\r\n- `-h` Show helps.\r\n\r\n```\r\nnode-import -e -o test/out test/index.js\r\n```\r\n\r\n## Release History\r\n* 2015-02-21        v0.1.3      \"Fixing mistakes with `async` option.\"\r\n* 2015-02-21        v0.1.2      \"Adding namespace support.\"\r\n* 2015-02-21        v0.1.1      \"First release.\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}