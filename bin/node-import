#! /usr/bin/env node
// -*- js -*-

"use strict";

var COLORS  = require('colors/safe'),
    OPTIMIS = require('optimist'),
    IMPORTS = require('../index.js'),
    PACKAGE = require('../package.json'),

    npm     = require('npm'),
    fst     = require('fs-extra'),

    /* Has Install Configs */
    has     = false, cfg;

if (fst.existsSync(process.cwd() + '/imports.json')) {
    has = true;

    cfg = require(process.cwd() + "/imports.json");
} else {
    cfg = {
        packages: [],
        location: './libraries'
    }
}

var loc = cfg.location || './libraries';

/* Boolean Getter */
var tobool = function (obj) {
    if ( 'string' === typeof obj ) {
        if ( obj === 'true' ) {
            return true;
        }
        else if ( obj === 'false' ) {
            return false;
        }
    }

    else if ( 'boolean' === typeof obj ) {
        if ( obj === true ) {
            return true;
        }
        else if ( obj === false ) {
            return false;
        }
    }

    return undefined;
}

/* Usage Help */
var usage =
        COLORS.cyan('NodeJS Scripts Import/Export (' + PACKAGE.name + ')\n') +
        COLORS.green('v' + PACKAGE.version + '\n') +
        PACKAGE.description + '\n\n' +
        COLORS.green('Usage: ') + COLORS.yellow('import') + ' ' + COLORS.cyan('[options] [files ...]');

/* Executor */
var exec = function (argv) {
    var RUN = tobool(argv.r);
    var ASY = tobool(argv.a);
    var EXP = tobool(argv.e);
    var MIN = tobool(argv.u);
    var MAP = tobool(argv.s);
    var DIR = 'string' == typeof argv.o ? argv.o : null;

    var opt = {
        exec      : RUN,
        async     : ASY,
        export    : EXP,
        exportDir : DIR,
        exportMin : MIN,
        exportMap : MAP,
    }

    return IMPORTS(argv._, opt, argv.v);
}

/* Registering Options */
OPTIMIS
    .usage(usage)
    .options('r', {
        describe : 'Run imported scripts.',
        type     : 'boolean',
        default  : false
    })
    .options('a', {
        describe : 'Run in async mode.',
        type     : 'boolean',
        default  : false
    })
    .options('e', {
        describe : 'Export imported scripts.',
        type     : 'boolean',
        default  : false
    })
    .options('u', {
        describe : 'Uglify exported scripts.',
        type     : 'boolean',
        default  : false
    })
    .options('s', {
        describe : 'Include sourcemap of exported scripts.',
        type     : 'boolean',
        default  : false
    })
    .options('o', {
        describe : 'Output directory for exported scripts.',
        type     : 'string',
        default  : null
    })
    .options('v', {
        describe : 'Logs all processes.',
        type     : 'boolean',
        default  : false
    })
    .options('h', {
        describe : 'Show helps.'
    })
    .options('i', {
        describe : 'Install NPM Packages',
    })
    .options('save', {
        describe : 'Save installed package to imports.json',
        type     : 'boolean',
        default  : false
    })
    .check(function (argv) {
        if ( argv.h ) {
            return OPTIMIS.showHelp();
        }

        /* Install Package */
        else if ( argv.i ) {
            var list, alias = '', done = 0;

            if ( argv.o && 'string' == typeof argv.o ) {
                loc = argv.o;
            }

            if ( argv.i == true ) {
                list = cfg.packages || [];

                list.forEach(function (pkg) {
                    alias += pkg + ', ';
                });
            }
            else {
                list = [ argv.i ], alias = argv.i;
            }

            argv._.forEach(function (pkg) {
                list.push(pkg);
                alias += pkg + ', ';
            });

            alias = alias.replace(/\,\s+$/, '');

            var mvdir = function (org, dir) {
                fst.move(org, dir, { clobber : true }, function (err) {
                    if ( !err ) {
                        done++;

                        if ( done == list.length ) {
                            console.log('Installed packages: ' + COLORS.yellow.bold(alias) + '.');

                            fst.writeJSONSync(process.cwd() + "/imports.json", cfg);
                        }
                        else {
                            nextpkg();
                        }
                    }
                    else {
                        console.log(err);
                    }
                });
            }

            var nextpkg = function () {
                var org = './.imptemp/node_modules/' + list[ done ];
                var dir = './' + loc.replace(/\/$/, '') + '/' + list[ done ];

                console.log('Finishing install ' + list[ done ] + ' ...');

                if ( argv.save == true ) {
                    var id = cfg.packages.indexOf(list[ done ]);

                    if ( id == -1 ) {
                        cfg.packages.push(list[ done ]);
                    }
                }

                if ( fst.existsSync(dir) ) {
                    fst.remove(dir, function () {
                        mvdir(org, dir);
                    });
                }
                else {
                    mvdir(org, dir);
                }
            }

            npm.load(function () {
                console.log('Installing ' + COLORS.yellow.bold(alias) + ' ...');

                npm.commands.install('./.imptemp/', list, function (err, data) {
                    if ( !err ) {
                        nextpkg();
                    }
                });
            });
        }

        else {
            if ( !argv._.length ) {
                throw new Error("input required");
            }
            else {
                exec(argv);
            }
        }
    })
    .argv;
